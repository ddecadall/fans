#include <fuzzer/interface/interface.h>

#include <dirent.h>
#include <fstream>
#include <fuzzer/dependency_solver.h>

#include <fuzzer/service.h>
#include <fuzzer/utils/log.h>
#include <iostream>
#include <json/json.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
using namespace std;

// service tx to service info
map<string, Json::Value> svcInfo;
map<string, Json::Value> targetTransactionInfo;
map<string, sp<IBinder>> generatedInterface;

NativeServiceManager::NativeServiceManager() {
#ifdef VENDORSERVICES
  ProcessState::initWithDriver("/dev/vndbinder");
#endif
  sm = defaultServiceManager();
}

sp<IBinder> NativeServiceManager::getService(Transaction &tx) {
  sp<IBinder> binder = NULL;
  if (generatedInterface.find(tx.interfaceName) != generatedInterface.end()) {
    binder = generatedInterface[tx.interfaceName];
    if (binder->pingBinder()) {
      FUZZER_LOGD("Use the existing alive interface.");
      return binder;
    } else {
      FUZZER_LOGD("The previous generated binder has died, so we need geenrate "
                  "a new one.");
      generatedInterface.erase(tx.interfaceName);
    }
  }
  FUZZER_LOGI("Start generating interface %s.", tx.interfaceName.c_str());
  if (tx.serviceName != "None") { // should be top level interface
    String16 serviceName = String16(tx.serviceName.c_str());
    binder = sm->checkService(serviceName);
    if (binder == NULL) {
      // this service is special, may only exist when ro.test_harness=1
      if (tx.interfaceName == "media.log") {
        binder = generateInterfaceManually(tx.interfaceName);
      } else {
        // failed, two reason
        // 1. remote service died
        // 2. can not be generated by remote service..
        sleep(5);
        // generate again..
        FUZZER_LOGI("Try to Generate the interface again.");
        binder = sm->checkService(serviceName);
      }
    }
  } else if (tx.dependency.size() != 0) {
    // multi-level interface
    // TODO: special for IGraphicBufferProducer, seems it can not be generated
    // easily, need improvement.
    if (tx.interfaceName == "IGraphicBufferProducer" &&
        IntType<int>::nOutOf(5, 10)) {
      binder = generateInterfaceManually(tx.interfaceName);
    } else {
      DependencySolver solver(NULL, BINDER_DEPENDENCY, tx.dependency);
      solver.solve();
      binder = solver.binder;
    }
  } else {
    // customized interface
    binder = generateInterfaceManually(tx.interfaceName);
  }
  if (binder == NULL) {
    FUZZER_LOGI("Failed to generated interface %s.", tx.interfaceName.c_str());
  } else {
    generatedInterface[tx.interfaceName] = binder;
    FUZZER_LOGI("Interface %s successfully generated.",
                tx.interfaceName.c_str());
  }
  return binder;
}
sp<IBinder>
NativeServiceManager::generateInterfaceManually(string interfaceName) {
  sp<IBinder> clientBinder = NULL, serviceBinder = NULL;
  Parcel data;
  FUZZER_LOGD("Generating interface manually.");
  serviceBinder = generateInterface(interfaceName, "");
  data.writeStrongBinder(serviceBinder);
  data.setDataPosition(0);
  clientBinder = data.readStrongBinder();
  return clientBinder;
}

String16 NativeServiceManager::getInterfaceName(sp<IBinder> service) {
  if (service != NULL) {
    Parcel data, reply;
    status_t err =
        service->transact(IBinder::INTERFACE_TRANSACTION, data, &reply);
    if (err == NO_ERROR) {
      return reply.readString16();
    }
  }
  return String16();
}

void loadServiceInfo(char *serviceInfoDir, char *targetInterface,
                     char *targetTransaction) {
  FUZZER_LOGI("----------------------- Start loading service "
              "info. -----------------------");
  loadJsonInfo(serviceInfoDir, svcInfo);
  for (map<string, Json::Value>::iterator it = svcInfo.begin();
       it != svcInfo.end(); it++) {
    if (targetInterface) {
      Json::Value &txMeta = it->second;
      if (!strcmp(txMeta["interfaceName"].asString().c_str(),
                  targetInterface)) {
        targetTransactionInfo[it->first] = it->second;
      }
    } else if (targetTransaction) {
      if (!strcmp(it->first.c_str(), targetTransaction)) {
        targetTransactionInfo[it->first] = it->second;
      }
    }
  }
  FUZZER_LOGI("----------------------- Finish loading service "
              "info. -----------------------\n");
}
